{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>When developing multiplayer games with Amazon GameLift, games developers usually integrate their games with Amazon GameLift before deciding how to test the more complex features such as matchmaking, and server scaling. Since testing game servers across fleets of elastic instances requires complex orchestration of virtual players, it\u2019s often hard to understand how best to configure Amazon GameLift, meaning its often left until late in the game development cycle.</p> <p>The Amazon GameLift Testing Toolkit helps games developers to quickly test, visualize, and optimize their multiplayer games. </p> <p>It automatically detects GameLift deployments, and provides a real-time view of player activity, letting users trial different designs, and quickly identify bugs and inefficiencies. This makes it easier to troubleshoot, debug, and tune your Amazon GameLift infrastructure.</p> <p>Coupled with the optional capability to launch virtual players running the same game code as real players, the Amazon GameLift Testing Toolkit gives game developers certainty their launch will be successful.</p>"},{"location":"additional_resources/","title":"Additional resources","text":""},{"location":"additional_resources/#aws-services","title":"AWS services","text":"<p>The Amazon GameLift Testing toolkit uses the following AWS services:</p> <ul> <li>Amazon API Gateway </li> <li>AWS CloudFormation</li> <li>Amazon CloudWatch </li> <li>Amazon Elastic Container Registry </li> <li>Amazon Cognito</li> <li>Amazon DynamoDB </li> <li>Amazon ECS</li> <li>Amazon EventBridge</li> <li>AWS Fargate</li> <li>Amazon GameLift</li> <li>AWS Identity and Access Management</li> <li>AWS Lambda</li> <li>Amazon S3</li> <li>Amazon Step Functions</li> </ul>"},{"location":"additional_resources/#costs","title":"Costs","text":"<p>You are responsible for the cost of the AWS services used while running this solution. </p> <p>As of November 2021, the cost for running this solution with the default settings and 8 virtual players in the us-east-1 region (N.Virginia) is approximately $0.52 for 1 hour testing on a C5.large on demand instance and a C5.large spot instance. However, be aware the costs of running bigger tests with more virtual players and larger fleet sizes will scale with the increase in resources, so before testing at scale you should run smaller tests and verify the costs first.   </p> AWS service Resources Cost Amazon GameLift 1x C5.large spot instance $0.028 Amazon GameLift 1x C5.large on demand instance $0.109 Amazon Fargate 8x vCPU hour $0.323 Step Functions 1,000 state transitions $0.025 DynamoDB 1,000 On-demand Write requests $0.010 DynamoDB 3,000 On-demand Read requests $0.000 Lambda 5,000 requests $0.010 Lambda 125 GB seconds duration $0.000 NAT Gateway 1 hour duration $0.045 Total cost: $0.522 <p>We recommend creating a budget through AWS Cost Explorer to help manage costs. Prices are subject to change. For full details, refer to the pricing webpage for each AWS service used in this solution.</p>"},{"location":"additional_resources/#source-code","title":"Source code","text":"<p>Visit our GitHub repository to download the source files for this solution and to share your customizations with others. The Amazon GameLift Testing Toolkit templates are generated using the AWS Cloud Development Kit (AWS CDK). Refer to the README.md file for additional information.</p>"},{"location":"additional_resources/#notices","title":"Notices","text":"<p>Customers are responsible for making their own independent assessment of the information in this document. This document: (a) is for informational purposes only, (b) represents AWS current product offerings and practices, which are subject to change without notice, and (c) does not create any commitments or assurances from AWS and its affiliates, suppliers or licensors. AWS products or services are provided \"as is\" without warranties, representations, or conditions of any kind, whether express or implied. AWS responsibilities and liabilities to its customers are controlled by AWS agreements, and this document is not part of, nor does it modify, any agreement between AWS and its customers.</p> <p>Amazon GameLift Testing Toolkit is licensed under the terms of the of the Apache License Version 2.0 available at The Apache Software Foundation.</p> <p>Copyright (c) 2022 by Amazon.com, Inc. or its affiliates. Amazon GameLift Testing Toolkit is licensed under the terms of the Apache License Version 2.0 available at The Apache Software Foundation</p>"},{"location":"aws_services/","title":"AWS services","text":"<p>Deploying this solution with the default parameters creates various infrastructure and resources on AWS, which are shown below on the left-hand side as the Testing Toolkit. </p> <p>However, the toolkit also requires a game to test, as shown below on the right-hand side as the Test Game. If you chose to deploy the test game when deploying the toolkit then the toolkit's SampleGame will also be installed, otherwise you'll need to deploy your own game integrated with GameLift.</p> <p> Figure 1: Amazon GameLift Testing Toolkit architecture on AWS</p> <p>Once the toolkit has been deployed with a game, the key interactions with the toolkit and the game are as follows: </p> <ol> <li>The UI provides the toolkit's management interface, which is hosted as a static website on Amazon Simple Storage Service (Amazon S3) and distributed by Amazon CloudFront. Users are authenticated via Amazon Cognito.</li> <li>The management services provide dynamic features for the web console, which are accessed through Amazon API Gateway endpoints that call AWS Lambda, and use Amazon DynamoDB for storage. API calls are authenticated using Amazon Cognito.</li> <li>Game servers and configuration in Amazon GameLift are queried and updated by the management services.</li> <li>Virtual players are controlled by the management services and run test game clients as AWS Fargate tasks in Amazon Elastic Container Service (Amazon ECS).</li> <li>Test game clients make calls to game client service API Gateway endpoints, which use Lambda functions to request matchmaking.</li> <li>Matchmaking requests are sent to GameLift to match virtual players in game server sessions.</li> <li>Test game clients connect directly to game servers to play games.</li> <li>GameLift listener listens for GameLift notifications and sends updates using Amazon EventBridge, and is controlled by AWS Step Functions.</li> <li>GameLift listener forwards notifications to the management services by updating DynamoDB.</li> </ol>"},{"location":"quick_start/","title":"Quick Start","text":"<p>Whether you're starting development of a multiplayer game with dedicated servers, or have already written a game using Amazon GameLift, you can quickly get the Amazon GameLift Testing Toolkit deployed and running.</p> <p>The quickest way to get started is to build and deploy the toolkit and the sample game, and you can then delete the sample game when you no longer need it.</p>"},{"location":"quick_start/#prerequisites","title":"Prerequisites","text":"<ul> <li>An existing AWS account.</li> <li>The AWS Command Line Interface (CLI) installed locally.</li> <li>Node.js 16.x installed locally, including npm.</li> <li>.NET 5 installed locally.</li> <li>A local copy of the toolkit source code.</li> </ul> <p>Additionally, if you intend to deploy the sample game or create virtual players you will also need:</p> <ul> <li>Docker installed and you should be logged in to Docker Hub.</li> </ul>"},{"location":"quick_start/#build","title":"Build","text":"<p>Once you have met the prequisites, building the toolkit takes a few minutes. You can build the toolkit by opening a terminal window, navigating to the toolkit's <code>source</code> directory, and running the following commands:</p> <pre><code>dotnet tool install -g Amazon.Lambda.Tools\nsudo npm install --global yarn\nyarn\nyarn build-toolkit\n</code></pre> <p>Optionally, if you also want to deploy the sample game you should run the following command: </p> <pre><code>yarn build-sample-game\n</code></pre>"},{"location":"quick_start/#deployment","title":"Deployment","text":"<p>Once you've built the toolkit you're ready to deploy to your AWS account, although be aware that deploying the toolkit to AWS will incure costs based on your usage. Deploying the toolkit should take roughly 15 minutes, but prior to deploying the toolkit you should familiarize yourself with the AWS services deployed by the toolkit. </p> <p>If you have configured the AWS CLI with multiple profiles you can pass in a name to choose which profile to target. </p> <pre><code>yarn deploy-toolkit [--profile &lt;profileName&gt;]\n</code></pre> <p>When the deployment succeeds succesfully the terminal will display a number of output variables. Make a note of the value of the <code>AmazonGameLiftTestingToolkit.CloudfrontDomainName</code> variable and the <code>AmazonGameLiftTestingToolkit.userPoolId</code> variable, which you will use in the next stage.</p> <p>Optionally, if you want to deploy the sample game you should run the following command: </p> <pre><code>yarn deploy-sample-game [--profile &lt;profileName&gt;]\n</code></pre>"},{"location":"quick_start/#first-time-login","title":"First time login","text":"<p>The toolkit uses Amazon Cognito to authenticate and authorize access to its web console, so prior to logging in  you will need to create a user in the toolkit's Cognito User Pool. </p> <ol> <li>Login to the AWS Management Console and navigate to Cognito</li> <li>In the list of User Pools select the User Pool with the userPoolId you previously noted.</li> <li>In the Users tab, choose Create user.</li> <li>In Users and groups select Create user and then enter your user details.</li> </ol> <p>Once you've created a user, you can login by navigating to the URL previously noted in the <code>AmazonGameLiftTestingToolkit.CloudfrontDomainName</code> variable.</p>"},{"location":"removing_the_toolkit/","title":"Removing the toolkit","text":"<p>You can remove the Amazon GameLift Testing Toolkit from your AWS account by using the source code's deployment script, the AWS Management Console, or the AWS Command Line Interface. </p>"},{"location":"removing_the_toolkit/#using-deployment-script","title":"Using deployment script","text":"<p>You can remove the toolkit using the deployment script by opening a terminal window, navigating to the toolkit's root directory, and then running the following command:</p> <pre><code>yarn delete-toolkit [--profile &lt;profileName&gt;]\n</code></pre> <p>To remove the sample game, run the following command:</p> <pre><code>yarn delete-sample-game [--profile &lt;profileName&gt;]\n</code></pre>"},{"location":"removing_the_toolkit/#using-aws-management-console","title":"Using AWS Management Console","text":"<ol> <li>Sign in to the AWS CloudFormation console.</li> <li>Navigate to the Stacks page.</li> <li>Select the AGTT-ManagementConsoleStack-WebStack stack, choose Delete, and wait until complete.</li> <li>Select the AGTT-ManagementConsoleStack-BackendStack stack, choose Delete, and wait until complete.</li> <li>Select the AGTT-ManagementConsoleStack-SecurityStack stack, choose Delete, and wait until complete.</li> <li>Select the AGTT-ManagementConsoleStack-DataStack stack and choose Delete.</li> </ol> <p>Optionally, to remove the sample game:</p> <ol> <li>Sign in to the AWS CloudFormation console.</li> <li>Navigate to the Stacks page.</li> <li>Select the AGTT-SampleGameStack-VirtualPlayerStack stack, choose Delete, and wait until complete.</li> <li>Select the AGTT-SampleGameStack-BackendStack stack and choose Delete.</li> </ol>"},{"location":"removing_the_toolkit/#using-aws-command-line-interface","title":"Using AWS Command Line Interface","text":"<p>To delete from terminal window, determine the installation stack name and then run the following commands:</p> <pre><code>aws cloudformation delete-stack --stack-name AGTT-ManagementConsoleStack-WebStack\naws cloudformation delete-stack --stack-name AGTT-ManagementConsoleStack-BackendStack\naws cloudformation delete-stack --stack-name AGTT-ManagementConsoleStack-SecurityStack\naws cloudformation delete-stack --stack-name AGTT-ManagementConsoleStack-DataStack\n</code></pre> <p>If you installed the sample game, you can remove it by running the following commands:</p> <pre><code>aws cloudformation delete-stack --stack-name AGTT-SampleGameStack-VirtualPlayerStack\naws cloudformation delete-stack --stack-name AGTT-SampleGameStack-BackendStack\n</code></pre>"},{"location":"removing_the_toolkit/#deleting-the-amazon-s3-buckets","title":"Deleting the Amazon S3 buckets","text":"<p>This solution is configured to retain the solution-created Amazon S3 bucket (for deploying in an opt-in Region) if you decide to delete the AWS CloudFormation stack to prevent accidental data loss. After uninstalling the solution, you can manually delete this S3 bucket if you do not need to retain the data. Follow these steps to delete the Amazon S3 bucket.</p> <ol> <li>Sign in to the Amazon S3 console.</li> <li>Choose  Buckets  from the left navigation pane.</li> <li>Locate the agtt-managementconsolestack-websitebucket{IDENTIFIER} S3 bucket.</li> <li>Select the S3 bucket and choose  Delete.</li> </ol> <p>To delete the S3 bucket using AWS CLI, run the following command:</p> <pre><code>aws s3 rb s3://agtt-managementconsolestack-websitebucket{IDENTIFIER} --force\n</code></pre>"},{"location":"security/","title":"Security","text":"<p>When you build systems on AWS infrastructure, security responsibilities are shared between you and AWS. This shared responsibility model reduces your operational burden because AWS operates, manages, and controls the components including the host operating system, the virtualization layer, and the physical security of the facilities in which the services operate. For more information about AWS security, visit AWS Cloud Security.</p>"},{"location":"security/#amazon-cloudfront","title":"Amazon CloudFront","text":"<p>This solution deploys a web console hosted in an Amazon S3 bucket. To help reduce latency and improve security, this solution includes an Amazon CloudFront distribution with an origin access identity, which is a CloudFront user that provides public access to the solution's website bucket contents. For more information, refer to Restricting Access to Amazon S3 Content by Using an Origin Access Identity in the Amazon CloudFront Developer Guide.</p>"},{"location":"security/#amazon-cognito","title":"Amazon Cognito","text":"<p>An Amazon Cognito user pool is used to authenticate users of the web console. It is configured as a provider for a Cognito identity pool that uses an IAM role to authorize access to the management services API Gateway.</p>"},{"location":"security/#iam-roles","title":"IAM roles","text":"<p>AWS Identity and Access Management (IAM) roles allow customers to assign granular access policies and permissions to services and users on the AWS Cloud.</p> <p>This solution creates a number of IAM roles that grant the solution's Lambda functions, Step Functions, and ECS tasks access to the resources they depend on.</p>"},{"location":"security/#amazon-virtual-private-cloud","title":"Amazon Virtual Private Cloud","text":"<p>An Amazon VPC is used to create a virtual network for the virtual players. The virtual players' ECS tasks run in private subnets, and access the GameLift servers and the game client services over the public Internet via NAT gateways.</p>"},{"location":"testing_your_game/","title":"Testing your game","text":"<p>The Amazon GameLift Testing Toolkit allows you to test your own games, although it also comes with a sample game, allowing you to experiment with the toolkit before integrating it with your own game. If you are integrating the toolkit with your own game, you might prefer not to install the sample game, which is described in the installation section.</p> <p>Since the toolkit integrates directly with Amazon GameLift, once you've integrated your game with GameLift then many of the toolkit's features will work out of the box.</p> <ul> <li>Web console, displaying a dashboard of your GameLift deployment</li> <li>Fleet scaling configuration, allowing fleets to be scaled up and down</li> <li>Match-making management, allowing match-making rules to be configured and tested</li> </ul> <p>However, to use the toolkit for testing your game at scale you need a mechanism to manage virtual players.</p>"},{"location":"testing_your_game/#externally-managed-virtual-players","title":"Externally managed virtual players","text":"<p>If you already have a test harness for creating and administering virtual players, or if you have real test players, you can manage players outside of the toolkit.</p> <p>The options for managing virtual players in the web console will be disabled, but you can use the remainder of the toolkit's features as described in the web console section.</p>"},{"location":"testing_your_game/#toolkit-managed-virtual-players","title":"Toolkit managed virtual players","text":"<p>The web console contains various features for managing virtual players. It allows a large number of virtual players to be created and deleted, and helps you test your game at scale.</p> <p>The virtual player management system has an API to control virtual players, which uses Amazon ECS and AWS Fargate to host containers running headless test clients.</p> <p>To integrate your game with the toolkit's virtual player management system, you need to do the following:</p> <ol> <li>Create a headless game client that connects with your game servers, and can automatically join and play games. The game client could either manage single or multiple player sessions at once, depending on how you decide to script your virtual players.</li> <li>Package your headless game client in a Linux docker image. Since the process for creating and packaging your game client in docker is dependent on your choice of game engine or programming language, we won't cover it here.</li> <li>Deploy your game server and any backend services.</li> <li>Deploy the Amazon GameLift Testing Toolkit, with or without the test game.</li> <li>Create an Amazon ECS cluster and task definitions to launch the headless game client, ensuring the task defintion has a tag called AmazonGameLiftTestingToolkit-VirtualPlayers with a value of true.</li> </ol> <p>Once you've packaged your game client in a docker image, you can create an Amazon ECS cluster and task definition to run the virtual players. There are various approaches for creating an ECS cluster, including a detailed tutorial in the AWS Fargate documentation.</p> <p>Alternatively you could use the Sample game as a starting point, and customize it's CDK deployment scripts to work with your container as follows:</p> <ol> <li>Make a copy of the source/SampleGame/ directory and give it a new name, for example TestMyGame.</li> <li>Delete the TestMyGame/Backend/ directory and delete the contents of the TestMyGame/Game/ directory.</li> <li>Add your game client's dockerfile and any associated files to the TestMyGame/Game/ directory.</li> <li>Open the TestMyGame/Infra/src/Program.cs file and update the StackName variable with a name to use for your virtual players CloudFormation stack. For example, TestMyGameVirtualPlayers.</li> <li>Open the TestMyGame/Infra/src/Lib/VirtualPlayersStack.cs file and update the gameClientCommand variable in the VirtualPlayersStack constructor method with an array of command line arguments for running your game client. The first item is the full path to the game client executable inside the docker container, and the remaining items are the arguments expected by the executable.</li> <li>Deploy the new virtual players stack by running the following command in the TestMyGame directory:</li> </ol> <pre><code>../node\\_modules/.bin/cdk deploy \n</code></pre> <p>Once the stack has successfully deployed, you can login and test your game as described in Using the web console.</p>"},{"location":"toolkit_design/","title":"Toolkit components","text":"<p>The solution is split into two main parts, the Management console, providing various test capabilities, and the optional Sample game, providing a headless multi-player game for testing.</p>"},{"location":"toolkit_design/#management-console","title":"Management console","text":"<p>The console provides various features for testing games with GameLift. It is split into a number of components.</p>"},{"location":"toolkit_design/#ui","title":"UI","text":"<p>A simple web interface to configure and control testing. You use the console to configure GameLift, and then create virtual players who are matched with other virtual players before joining game server sessions.</p> <p>The interface is designed to simplify interacting with GameLift, allowing you to quickly test different match-making and fleet designs, and ensure GameLift is properly tuned for your game.</p> <p>The UI is implemented as a static website built with Phaser. The site is hosted in an Amazon S3 bucket which can be accessed through an Amazon CloudFront distribution. User access control is provided by an Amazon Cognito user pool.</p>"},{"location":"toolkit_design/#management-services-and-data","title":"Management services and data","text":"<p>The web console's functionality is provided by the management services. The services consist of an API Gateway WebSocket API, which uses IAM authorization for access control and then calls a .NET Core 3.1 Lambda function.</p> <p>The Lambda function stores WebSocket connection details in a DynamoDB connections table. It then handles a variety of messages from the web console, interacting with a number of resources.</p> <p>Integrates with GameLift to retrieve game server information, such as fleet details and player sessions, to manage matchmaking, and to retrieve Amazon CloudWatch logs.</p> <p>The DynamoDB tables store the service's state data, and include a cache of recent GameLift state such as queue events, matchmaking tickets, and game session details.</p> <p>Launches and terminates virtual players by calling Amazon ECS.</p>"},{"location":"toolkit_design/#gamelift-listener","title":"GameLift listener","text":"<p>The GameLift listener is responsible for listening to GameLift event notifications and keeping the management services up-to-date.</p> <p>The listener defines an Amazon EventBridge management service event bus and subscribes to GameLift matchmaking and queue placement events using rules. The events are then published to the management services by inserting event data in the corresponding DynamoDB tables.</p> <p>In addition, there's an AWS Step Function that regularly calls GameLift, checks its current state, and removes any out-of-date data from the management services' DynamoDB tables.</p>"},{"location":"toolkit_design/#sample-game","title":"Sample game","text":"<p>To get started quickly, the toolkit includes an optional sample game, a basic multi-player game allowing you to test GameLift before integrating your game with GameLift.</p>"},{"location":"toolkit_design/#game-servers","title":"Game servers","text":"<p>The sample game is a basic .NET game called NumbersQuiz, which pits two players against each other, scoring points by answering arithmetic questions.</p> <p>A Linux build of the game server is uploaded to GameLift as a custom server build, and a couple of On-Demand and Spot fleets are created for hosting games. Finally, a simple matchmaking ruleset is created to enable match-making.</p>"},{"location":"toolkit_design/#virtual-players","title":"Virtual players","text":"<p>Virtual players are created by the management services to test the game. Virtual players run as a scripted game client that connects to the Game client services for matchmaking, and then connects to a GameLift game server to play the game.</p> <p>The virtual player client is installed in a docker image, which is uploaded to a private repository in Amazon Elastic Container Registry (Amazon ECR). An Amazon ECS Fargate cluster is also created, along with a task definition referencing the docker image.</p> <p>The management service can only run task definitions that have a tag called AmazonGameLiftTestingToolkit-VirtualPlayers with a value of   true, restricting its access to ECS task defintions in your account.</p> <p>When the management service creates new virtual players, it sends requests to ECS to create new tasks, with each task running a container with the game client for a single virtual player. The tasks all run within an Amazon Virtual Private Cloud (Amazon VPC).</p>"},{"location":"toolkit_design/#game-client-services","title":"Game client services","text":"<p>When a virtual player wants to join a game, the game client calls the game client services to request matchmaking, which matches the virtual player with another player, and replies with details of the GameLift server.</p> <p>Matchmaking runs in two phases. Firstly, the game client starts matchmaking by sending a request to an API Gateway WebSocket API. The API forwards the request to a Lambda function that calls GameLift and stores the matchmaking ticket in a DynamoDB table. Secondly, once the GameLift listener receives a matchmaking completion event, it calls a Lambda function to update the ticket information in DynamoDB, and tells API Gateway to send the game server information to the clients matched in the ticket.</p>"},{"location":"using_the_toolkit/","title":"Using the toolkit","text":"<p>Interaction with the toolkit is predominantly through its web console, which can be accessed once deployed as described in Quick start.</p> <p>The web console contains two distinct parts: the action menu, available through the cog icon in the top-left corner of the screen, and the main screen. The action menu provides features to configure or control the toolkit and GameLift, while the main screen visualises the AWS account's GameLift resources, and allows adjusting some of the resources' configuration.</p> <p>If you deployed the toolkit in an account without any GameLift resources, then the main screen will be empty. You can by update the toolkit to include the sample game as described in Quick start.</p>"},{"location":"using_the_toolkit/#actions-menu","title":"Actions menu","text":"<p>The actions menu provides options to interact with virtual players and Amazon GameLift FlexMatch. </p> <p>Virtual players are launched using Amazon ECS Fargate tasks. Creating virtual players for a game requires packaging a headless game client in a docker container, as described in Testing your game, although the sample game comes with its own virtual player container.</p> <p>FlexMatch is a customizable matchmaking service that allows you to build custom rules to defines what a multiplayer match looks like for your game.</p> <p>The toolkit's specific actions include:</p> <ul> <li> <p>Virtual Player Tasks. Allows launching virtual players, selecting the ECS task to use, the number of players to launch, and whether the players should launch in one go or continuously over a period of time.</p> <ul> <li>Launch Player Tasks. Launch 1 or more virtual players by selecting a Fargate task defintion, and either launching immediately or by using a Task Schedule.</li> <li>Manage Running Tasks.  Shows a searchable list of all running virtual players, provviding access to player logs, and allowing 1 or more virtual players to be shut down.</li> <li>Player Task Schedules. Provides features to manage task schedules, creating and terminating player tasks over a configurable period of time to simulate different types of player load.</li> <li>Task Launch History. Shows a searchable list of launched player tasks, and provides access to task logs.</li> </ul> </li> <li> <p>Manage FlexMatch Rulesets. Allows easy configuration of FlexMatch rulesets. New rulesets can be created and validated for correct syntax, and existing rulesets can be viewed, copied, or deleted. To edit an existing ruleset, first create a copy, update the rules, and then validate and save the copy.</p> </li> <li> <p>FlexMatch Simulator. Allows testing FlexMatch Rulesets without running either game servers or virtual players, by creating dummy players and running simulated matchmaking sessions. Used to understand and debug matchmaking rules without requireing the underlying game.</p> <ul> <li>Simulate Matchmaking. Run matchmaking simulations by selecting a FlexMatch ruleset, and confifuring the number of players, the player profiles, and optionally the latency profiles to use in matchmaking. </li> <li>Player Profiles. Manage player profiles, consisting of groups of 1 or more attributes with pre-defined or computed values, which are used to types of player.</li> <li>Latency Profiles. Manage latency profiles, consisting of simulated latency ranges to apply to players accessing different regions.</li> <li>Manage Rule Sets. Allows easy configuration of FlexMatch rulesets, as previously described.</li> </ul> </li> <li> <p>Logout. Logs out of the web console.</p> </li> </ul>"},{"location":"using_the_toolkit/#main-screen","title":"Main screen","text":"<p>The main screen allows you to view and interact with the GameLift resources deployed in the same AWS account as the toolkit. </p> <p>It is split into three sections and shows the animated flow of players as they move from matchmaking into GameLift queues, before joining games on fleet server instances.</p> <p>Tip: You can disable animations by clicking the player icon in the console's top-left.</p> <p>You can also use each of the sections to view and modify the configuration for GameLift's various resources.</p>"},{"location":"using_the_toolkit/#matchmaking-configurations","title":"Matchmaking configurations","text":"<p>Shows the currently configured FlexMatch matchmaking configurations. Clicking on the title shows the matchmaking configuration, and clicking on the cog provides various matchmaking options:</p> <ul> <li>View Tickets shows a searchable list of matchmaking tickets, allowing you to drill down into the events associated with the ticket, and also the queue event if the ticket resulted in a queue placement.</li> <li>Modify Config allows changing the ruleset associated with the matchmaking configuration.</li> <li>View Metrics shows a variety of matchmaking statistics.</li> </ul>"},{"location":"using_the_toolkit/#queues","title":"Queues","text":"<p>Shows the GameLift queues. Clicking on the title shows the queue configuration, and clicking on the cog provides various matchmakqueue options:</p> <ul> <li>View Queue Events to see a searchable list of queue placement events, including the associated matchmaking tickets.</li> <li>View Metrics shows a variety of queue statistics.</li> </ul>"},{"location":"using_the_toolkit/#fleets","title":"Fleets","text":"<p>Shows the GameLift fleets, including the number of instances in each fleet. Clicking on the title shows the fleet configuration, clicking on an instance's server icon shows the instance's details, and clicking on the cog provides various fleet options:</p> <ul> <li>View Fleet Events shows a searchable list of fleet events, and allows you to retrieve logs for events with logs.</li> <li>View Metrics shows a variety of fleet statistics.</li> <li>View Game Session Log shows a searchable list of game sessions, including associated player sessions and logs.</li> <li>Modify Locations allows configuration of the fleet's remote locations, determining where instances can be deployed to host game sessions.</li> <li>Adjust Scaling allows the fleet's capacity and scaling settings to be viewed and updated.</li> </ul>"}]}